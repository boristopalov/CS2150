c00d 000		jmp 	loop1	skip over the variables
0000 001 i		dw		0		int i
0000 002 j		dw		0		int j
0005 003 n		dw		5		int n = 5
0000 004 curr   dw		0		int currnum
0044 005 a		dw		44		int a[5]
3000 006 loadit dw 		3000    base load instruction
0001 007 one	dw		1		
4000 008 storit dw      4000    base store instruction
0000 009 next   dw      0       int next
3001 00a inc    load    i       i += 1
5007 00b        add     one 
4001 00c   		store   i     
3003 00d loop1	load	n		if i >= n go to xit
b000 00e           
6001 00f 		sub		i 
e043 010		jmpl	xit
d043 011		jmpe	xit
3007 012        load    one     j = 1
b000 013        
4002 014        store   j
3001 015 loop2	load    j		
b000 016		
b000 017		
b000 018              		
b000 019	
3003 01a        load    n 		if j >= n go to inc		
6002 01b		sub     j
e00a 01c	    jmpl	inc
d00a 01d		jmpe 	inc
3006 01e		load	loadit	array load instruction 
5005 01f 		add		a	
5002 020		add		j 	
6007 021		sub     one 
4023 022     	store   loadcurr		
0000 023 loadcurr  dw	0		a[j-1]
4004 024 		store	curr	
3023 025 		load	loadcurr		
5007 026		add		one
4028 027 		store	loadnext			
0000 028 loadnext  dw	0		a[j]
4009 029 		store   next
6004 02a 		sub		curr
e033 02b		jmpl	swap 	if a[j] < a[j-1]
b000 02c		
b000 02d		
b000 02e		
3002 02f		load    j
5007 030		add     one		j += 1
4002 031		store   j
c015 032		jmp		loop2	
3008 033 swap	load	storit
5005 034 		add		a
5002 035 		add		j
6007 036		sub     one 
4039 037 		store	curradr
3009 038		load	next
0000 039 curraddr dw	0		store instruction for swap
3039 03a 		load	curradr
5007 03b		add		one
403e 03c		store	nextaddr
3004 03d 		load	curr
0000 03e nextaddr dw 	0
3002 03f 		load	j	  		
5007 040		add		one	 	
4002 041		store	j			
c015 042		jmp		loop2
0000 043 xit	halt    	
0040 044 a 		dw		40		int a[5]
0010 045				10		a[1]
0050 046				50		a[2]
0030 047				30		a[3]
0020 048				20		a[4]